pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

system:
	configuration_ns = "1-16-0"
	name = el_test; uuid = "A325754F-7BEB-44B6-937C-CC7EBDDA764F"
	description:
		"""
			Eiffel-Loop Library Tests
		"""
	# classic means C code as an intermediate language
	target: 
		name = classic
		root:
			class = APPLICATION_ROOT; feature = make
		version:
			major = 1; minor = 6; release = 5; build = 355
			company = "Eiffel-Loop"; product = "test"
			copyright = "Finnian Reilly"

		option:
			syntax = standard; full_class_checking = false; void_safety = none
			assertions:
				precondition = true; postcondition = true; check = true

		settings:
			address_expression = false; array_optimization = false
			check_vape = true; console_application = true; concurrency = thread
			dead_code_removal = true; dynamic_runtime = false
			exception_trace = true
			inlining = true; inlining_size = 2
			line_generation = false

		precompile:
			name = precompile; location = "$ISE_PRECOMP/EL/console-application.ecf"

		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			ise_base = "base/base.ecf"
			option:
				assertions:
					precondition = true; postcondition = true; check = true; invariant = true
			ise_base_ext = "base_extension/base_extension.ecf"
			ise_encoding = "encoding/encoding.ecf"
			ise_time = "time/time.ecf"
			option:
				assertions:
					precondition = true; postcondition = true
			ise_thread = "thread/thread.ecf"
			ise_net = "net/net.ecf"
			ise_testing = "testing/testing.ecf"

		# ISE contributions
		variable:
			name = eapml_limb_type; value = natural_32
		libraries:
			location = "$ISE_LIBRARY/contrib/library"
			ise_integer_x = "math/eapml/eapml.ecf"
			ise_encryption = "text/encryption/eel/eel.ecf"

		# Other libraries
		library:
			nel_fft_math = "$EIFFEL_LOOP/contrib/Eiffel/NEL-math/fft-math.ecf"

		# EiffelLoop libraries
		writeable_libraries:
			EL_base = "$EIFFEL_LOOP/library/base/base.ecf"
			option:
				assertions:
					precondition = true; postcondition = true; check = true

		variable:
			name = eros_server_enabled; value = false

		writeable_libraries:
			location = "$EIFFEL_LOOP/library"
			EL_amazon_ia = "amazon-instant-access.ecf"
			EL_app_manage = "app-manage.ecf"
			EL_C_interface = "C-language-interface.ecf"
			EL_compression = "compression.ecf"
			EL_currency = "currency.ecf"
			EL_doc_scan = "document-scan.ecf"
			EL_eco_db = "Eco-DB.ecf"
			EL_encryption = "encryption.ecf"
			EL_eros = "eros.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_fast_cgi = "fast-cgi.ecf"
			EL_file_process = "file-processing.ecf"
			EL_http_client = "http-client.ecf"
			EL_i18n = "i18n.ecf"
			EL_image_utils = "image-utils.ecf"
			EL_logging = "logging.ecf"
			EL_markup_docs = "markup-docs.ecf"
			EL_multimedia = "multi-media.ecf"
			EL_network = "network.ecf"
			EL_os_command = "os-command.ecf"
			EL_paypal_SBM = "paypal-SBM.ecf"
			EL_public_key_encryption = "public-key-encryption.ecf"
			EL_pyxis_scan = "pyxis-scan.ecf"
			EL_search_engine = "search-engine.ecf"
			EL_vtd_xml = "vtd-xml.ecf"
			EL_xml_scan = "xml-scan.ecf"
			EL_text_formats = "text-formats.ecf"
			EL_testing = "testing.ecf"
			EL_text_process = "text-process.ecf"
			EL_thread = "thread.ecf"

		# Excluded on Windows because symbolic link Eiffel-Loop\contrib\C++\taglib\include is linked to Linux library
		# Solve this problem in future version
		writeable_libraries:
			EL_taglib = "$EIFFEL_LOOP/library/TagLib.ecf"
			condition:
				platform = unix

		writeable_libraries:
			EL_wel_x_audio = "$EIFFEL_LOOP/library/wel-x-audio.ecf"
			condition:
				platform = windows

		writeable_libraries:
			EL_wel_regedit_x = "$EIFFEL_LOOP/library/wel-regedit-x.ecf"
			condition:
				platform = windows

		cluster:
			name = constants; location = "$EIFFEL_LOOP"
			# FEATURE_CONSTANTS
			sub_clusters:
				editor = "tool/eiffel/source/edit/editor/constants"
			# REFLECTION_TEST_SET.test_enumeration
			sub_clusters:
				taglib_enums = "library/multimedia/ID3/taglib/constants/enums"
				condition:
					platform = windows
				file_rule:
					exclude:
						"/tl_musicbrainz_enum.e$"

		cluster_tree:
			root = "source/root"
			platform_list:
				"imp_mswin; imp_unix"
			description:
				"""
					Root class and Experiments
					
					Root class [./test/source/root/application_root.html APPLICATION_ROOT] and a collection of developer experiments
					to verify understanding of ISE base classes.

					See doc/test.root.txt for details
				"""
		cluster_tree:
			amazon_ia = "source/amazon-ia"
			description:
				"""
					amazon-instant-access.ecf
					
					Tests for Eiffel interface to Amazon Instant Access API.
					See class ${AMAZON_INSTANT_ACCESS_TEST_APP}
				"""
		cluster_tree:
			app_manage = "source/app-manage"
			description:
				"""
					app-manage.ecf
					
					Tests for Eiffel application and sub-application management and implementation.
					See class ${EL_MULTI_APPLICATION_ROOT} and ${EL_APPLICATION}
				"""
		cluster_tree:
			base = "source/base"
			description:
				"""
					base.ecf (Eiffel-Loop)
					
					Test Eiffel-Loop base classes. See ${BASE_AUTOTEST_APP}
				"""
		cluster_tree:
			c_language_interface = "source/C-language-interface"
			platform_list:
				"imp_mswin; imp_unix"
			description:
				"""
					C-language-interface.ecf
					
					See class ${C_LANGUAGE_INTERFACE_AUTOTEST_APP}
				"""
		cluster_tree:
			common = "source/common"
			description:
				"""
					Common Classes

					See doc/test.common.txt for details
				"""
		cluster_tree:
			compression = "source/compression"
			description:
				"""
					compression.ecf
					
					See class ${COMPRESSION_TEST_APP}
				"""
		cluster_tree:
			currency = "source/currency"
			description:
				"""
					currency.ecf
					
					See class ${CURRENCY_TEST_APP}
				"""
		cluster_tree:
			eiffel = "source/eiffel"
			description:
				"""
					Eiffel Core Concepts

					Test core concepts and behaviour of basic Eiffel code and libraries.
					See class ${EIFFEL_AUTOTEST_APP}
				"""
		cluster_tree:
			encryption = "source/encryption"
			description:
				"""
					encryption.ecf
					
					See class ${ENCRYPTION_AUTOTEST_APP}
				"""
		cluster_tree:
			eco_db = "source/Eco-DB"
			description:
				"""
					Eco-DB.ecf
					
					Test [./library/Eco-DB.html Eco-DB (Eiffel CHAIN Orientated Database)] library.

					Test application: ${ECO_DB_AUTOTEST_APP}
				"""
		cluster_tree:
			eros = "source/eros"
			description:
				"""
					eros.ecf
					
					Test [./library/eros.html Eiffel Remote Object Server (EROS)] protocol library.

					**Test Apps**

					* ${EROS_AUTOTEST_APP}					
					* ${BEXT_CLIENT_TEST_APP}
					* ${BEXT_SERVER_TEST_APP}
					* ${FOURIER_MATH_CLIENT_TEST_APP}
					* ${FOURIER_MATH_SERVER_TEST_APP}
				"""
		cluster_tree:
			evolicity = "source/evolicity"
			description:
				"""
					evolicity.ecf
					
					Test of Evolicity text substitution engine.
					See class ${EVOLICITY_TEST_APP}
				"""
		cluster_tree:
			fast_cgi = "source/fast-cgi"
			description:
				"""
					fast-cgi.ecf
					
					Test [./library/fast-cgi.html Fast CGI Web Services)] library.

					See class ${FAST_CGI_AUTOTEST_APP}
				"""
		cluster_tree:
			file_processing = "source/file-processing"
			description:
				"""
					file-processing.ecf
					
					Test [./library/file-processing.html File and Directory Processing)] library.

					See class ${FILE_PROCESSING_AUTOTEST_APP}
				"""
		cluster_tree:
			http_client = "source/http-client"
			description:
				"""
					http-client.ecf
					
					See class ${HTTP_CLIENT_AUTOTEST_APP}
				"""
		cluster_tree:
			i18n = "source/i18n"
			description:
				"""
					i18n.ecf
					
					Test localization library.
					See class ${I18N_AUTOTEST_APP}
				"""
		cluster_tree:
			image_utils = "source/image-utils"
			description:
				"""
					image-utils.ecf
					
					See class ${SVG_TO_PNG_CONVERSION_TEST_APP}
				"""
		cluster_tree:
			markup_docs = "source/markup-docs"
			description:
				"""
					markup-docs.ecf
					
					* Test subject line decoding for Thunderbird Email Export with ${THUNDERBIRD_TEST_APP}
					* Regression test reading of Open Office Spreadsheet with ${OPEN_OFFICE_TEST_APP}
				"""
		# Excluded on Windows because TagLib.ecf is not yet available for Windows
		cluster_tree:
			multimedia = "source/multimedia"
			description:
				"""
					multimedia.ecf
					
					* Test wav to mp3 conversion
				"""
			condition:
				platform = unix
		cluster_tree:
			network = "source/network"
			description:
				"""
					network.ecf
					
					Test network library classes

					* ${TEST_SIMPLE_CLIENT}
					* ${SIMPLE_SERVER_TEST_APP}
				"""
		cluster_tree:
			os_command = "source/os-command"
			platform_list:
				"imp_mswin; imp_unix"
			description:
				"""
					os-command.ecf
					
					* Test OS command interface library. See class ${OS_COMMAND_AUTOTEST_APP}
					* Test set for classes that manage and read file system content. See class ${FILE_AND_DIRECTORY_TEST_SET}
				"""
		cluster_tree:
			paypal_sbm = "source/paypal-SBM"
			description:
				"""
					paypal-SBM.ecf
					
					Tests for Eiffel interface to PayPal Payments Standard Button Manager API.
					See class ${PAYPAL_STANDARD_BUTTON_MANAGER_TEST_APP}
				"""
		cluster_tree:
			public_key_encryption = "source/public-key-encryption"
			description:
				"""
					public-key-encryption.ecf
					
					Tests for RSA public key encryption tools.
					See class ${PUBLIC_KEY_ENCRYPTION_TEST_APP}
				"""
		cluster_tree:
			pyxis_scan = "source/pyxis-scan"
			description:
				"""
					pyxis-scan.ecf
					
					Test application class: ${PYXIS_SCAN_AUTOTEST_APP}
				"""
		cluster_tree:
			regedit = "source/regedit"
			description:
				"""
					wel-regedit-x.ecf
					
					See class ${REGEDIT_AUTOTEST_APP}
				"""
			condition:
				platform = windows
		cluster_tree:
			search_engine = "source/search-engine"
			description:
				"""
					search-engine.ecf
					
					See class ${SEARCH_ENGINE_AUTOTEST_APP}
				"""
		cluster_tree:
			taglib = "source/TagLib"
			description:
				"""
					TagLib.ecf
					
					See class ${TAGLIB_AUTOTEST_APP}
				"""
			condition:
				platform = unix
		cluster_tree:
			text_formats = "source/text-formats"
			description:
				"""
					text-formats.ecf
					
					See class ${TEXT_FORMATS_AUTOTEST_APP}
				"""
		cluster_tree:
			text_process = "source/text-process"
			description:
				"""
					text-process.ecf
					
					See class ${TEXT_PROCESS_AUTOTEST_APP}
				"""
		cluster_tree:
			vtd_xml = "source/vtd-xml"
			description:
				"""
					vtd-xml.ecf
					
					Tests for Eiffel interface VTD-XML C API

					See class ${VTD_XML_AUTOTEST_APP}
				"""
		cluster_tree:
			wel_x_audio = "source/wel-x-audio"
			description:
				"""
					wel-x-audio.ecf
					
					Maintenance of Windows audio classes
					See class ${MEDIA_PLAYER_DUMMY_APP}
				"""
			condition:
				platform = windows

		cluster_tree:
			xml_scan = "source/xml-scan"
			description:
				"""
					xml-scan.ecf
					
					Test application class: ${XML_SCAN_AUTOTEST_APP}
				"""

