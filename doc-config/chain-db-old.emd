Implements "in-memory" ''database'' tables based on an interface defined by the kernel Eiffel class [https://www.eiffel.org/files/doc/static/18.01/libraries/base/chain_chart.html CHAIN]. There are two table types:

1. Monolithic tables which can only be saved to disk as a whole and any new items which have not been saved will be lost.
2. Transactional tables where the effects of the table item operations: ''extend, replace or delete'',  are immediately committed to disk in an editions table file. When the editions file gets too large, the editions are consolidated into the main table file.

Monolithic tables are implemented by class: [$source EL_STORABLE_CHAIN] which takes a generic paramter of type [$source EL_STORABLE].

This class defines the basic database ''CRUD'' concept of **C**reate, **R**ead, **U**pdate and **D**elete:

**Create:** is implemented by the `{[$source EL_STORABLE_CHAIN]}.extend' procedure.

**Read:** is implemented by the `{[$source EL_STORABLE_CHAIN]}.item' function.

**Update:** is implemented by the `{[$source EL_STORABLE_CHAIN]}.replace' procedure.

**Delete:** is implemented by the `{[$source EL_STORABLE]}.delete' procedure.

Transactional tables are implemented using the [$source EL_RECOVERABLE_STORABLE_CHAIN] class which inherits [$source EL_STORABLE_CHAIN]. It is called 'recoverable' because if the power suddenly goes off on your PC, the table is fully recoverable from the editions file. 

**ENCRYPTION**

AES encryption is supported for both monolithic and transactional tables.

**RELATIONAL CAPABILITIES**

* The implementing class [$source EL_STORABLE_LIST] provides automated field indexing and the auxilary class [$source EL_KEY_INDEXABLE] provides an automated primary key index. Using these indexes you can perform joins between lists using Eiffel.

** QUERY LANGUAGE **

The implementing class [$source EL_STORABLE_LIST] provides an Eiffel orientated query language via the inherited class [$source EL_QUERYABLE_CHAIN] and the helper class [$source EL_QUERY_CONDITION_FACTORY]. Conditions can be combined using the logical operators: `and', `or' and `not'. Queries are not parsed strings but actual Eiffel expressions.

**EXAMPLES**

For an example of [$source EL_STORABLE_CHAIN] see class [$source EL_TRANSLATION_ITEMS_LIST] found in the `i18n.ecf' localization library. Unfortunately the only examples for [$source EL_RECOVERABLE_STORABLE_CHAIN] are in a closed commercial project, but the usage is pretty similar.
