pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"; uuid = "229b789e-09aa-11df-87c7-1bf8afd2bbad" 
	name = EL_base; library_target = EL_base
	
	target:
		name = EL_base
		description: 
			"""
				Base classes for Eiffel-Loop

				Clusters:

				* Data Structure
				* Math
				* Runtime
				* Data Persistence
				* Text Processing
				* Utility
			"""
		root:
			all_classes = true

		option:
			namespace = "Eiffel-Loop.Library"; trace = false; debug = false; warning = true
			syntax = standard; full_class_checking = false; void_safety = none
			assertions:
				precondition = true; postcondition = true; check = true; invariant = false

		mapping:
			ZSTRING = EL_ZSTRING
		mapping:
			DIR_PATH = EL_DIR_PATH
		mapping:
			FILE_PATH = EL_FILE_PATH

		# Needed for Windows XP
		external_object:
			location = "$EL_C_MSC_RUNTIME/spec/$ISE_PLATFORM/msvcr71.dll"
			description:
				"MS VC++ Runtime (for Windows XP)"
			condition:
				shared = true
				platform = windows
				copy = "$location"

		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"
			base_ext = "base_extension/base_extension.ecf"
			encoding = "encoding/encoding.ecf"
			ise_i18n = "i18n/i18n.ecf"
			condition:
				platform = windows

			net = "net/net.ecf"
			time = "time/time.ecf"
			thread = "thread/thread.ecf"
			uuid = "uuid/uuid.ecf"

		# CLUSTERS
		cluster_tree:
			data_structure = data_structure
			description:
				"""
					Data Structure
					
					Various hash-table, array, list, chain and linear types

					See doc/base.data_structure.txt for details
				"""
		cluster_tree:
			date_time = "text/date-time"
			description:
				"""
					Date and Time
					
					Classes for parsing and formatting date and time strings.
				"""
		cluster_tree:
			math = math
			description:
				"""
					Math
					
					Some basic math classes for the following:

					* 2D geometry
					* Calculating integrals of arbitrary functions
					* Representing column vectors
				"""
		cluster_tree:
			file = "runtime/file"
			description:
				"""
					Files and Directories
					
					Classes for the following:

					* Naming files and directories
					* Reading file properties
					* Processing directory data
					* Processing file data
					* File transfer synchronization
				"""
			platform_list:
				"imp_mswin; imp_unix"

		cluster_tree:
			io = "runtime/io"
			description:
				"""
					Input/Output
					
					Classes for the following:

					* Writing to the console with color highlighting
					* Read user input data
				"""
			platform_list:
				"imp_mswin; imp_unix"

		cluster_tree:
			kernel = "kernel"
			description:
				"""
					Kernel
					
					Fundamental base classes
				"""
			platform_list:
				"imp_mswin; imp_unix"
			file_rule:
				exclude:
					"/reflection$"
					"/initialization$"

		cluster_tree:
			initialization = "kernel/initialization"
			description:
				"""
					Class Creation and Initialization

					Classes for the following:
					
					* Creating and initializing instances of a class.
					* Factory indirection, i.e. factories for creating factories.
					* Managing cross-platform bridge initialization
					* Managing `Precursor' calls to avoid repeats
					* Managing creation and initialization of singleton objects
					* Managing creation of "lazy attributes"
				"""
		cluster_tree:
			reflection = "kernel/reflection"
			description:
				"""
					Class Reflection
					
					Building on the basic ISE reflection mechanisms, this cluster makes possible a very flexible way
					of exchanging data between Eiffel objects and any structured plaintext format, and also a binary
					memory block conforming to ${EL_MEMORY_READER_WRITER} (inherits ${SED_MEMORY_READER_WRITER})

					See doc/base.reflection.txt for details
				"""
		cluster_tree:
			runtime = runtime
			description:
				"""
					Runtime Operations
					
					Classes for the following:

					* Exception handling
					* Reading and writing from memory locations
					* Accessing operating environment information
					* Tracking progress of time consuming operations
					* Managing shared resources for competing threads
				"""
			platform_list:
				"imp_mswin; imp_unix"
			file_rule:
				exclude:
					"/file$"
					"/io$"

		cluster_tree:
			persistency = persistency
			description:
				"""
					Data Persistence

					Classes providing the following facilities:

					* Reading and writing arrays of floating-point type ${REAL_64}.
					* Files that notify a listener of byte-count written and read.
					* A file conforming to ${PLAIN_TEXT_FILE} that implements ${EL_OUTPUT_MEDIUM}
					* File line source and other abstractions
				"""
		cluster_tree:
			buffer = "text/buffer"
			description:
				"""
					String Buffering

					Classes for buffering string data in shared objects
				"""
		cluster_tree:
			string = "text/string"
			description:
				"""
					String Handling

					Classes providing the following:

					* Abstractions for objects createable from strings
					* Escaping and unescaping
					* Iterating substring splits based on a character or substring separator
					* Jail-breaking immutable strings
					* Recording and managing string edit histories
					* Specialized types of strings
					* String template substitution
					* Supplementary string routines for general use
				"""
			file_rule:
				exclude:
					"/structures$"

		cluster_tree:
			string_structures = "text/string/structures"
			description:
				"""
					Substring Structures

					Container classes for substrings

					* Compacted arrays of substrings
					* Grids of substrings
					* Lists of substrings
					* String occurrence interval lists
					* Tables of substrings
				"""
		cluster_tree:
			zstring = "text/zstring"
			description:
				"""
					Class ZSTRING

					An implementation of a memory compact string with the same unicode character range as the ''base.ecf''
					class ${STRING_32} and conforming to ${STRING_GENERAL}.
					The ${ZSTRING} class (alias for ${EL_ZSTRING}) has many additional
					routines not found in ${STRING_32}, as for example: Python like tuple substitution.
					
					**See Articles**

					* [https://www.eiffel.org/blog/finnianr/zstring_released_in_eiffelloop_131 ZSTRING released in Eiffel-Loop 1.3.1]
					* [https://www.eiffel.org/blog/finnianr/introducing_class_zstring Introducing class ZSTRING]
					* [https://www.eiffel.org/article/iso8859_is_dead_long_live_iso8859 ISO-8859 is dead, long live ISO-8859]

					**Benchmarks ${ZSTRING} vs ${STRING_32}**

					* [./benchmark/ZSTRING-benchmarks-latin-1.html Base character-set Latin-1]
					* [./benchmark/ZSTRING-benchmarks-latin-15.html Base character-set Latin-15]
				"""
		cluster_tree:
			text = text
			description:
				"""
					Text Processing

					Classes providing the following:

					* Character and character sequence conversion
					* Character encoding
					* Class and routine naming-convention translation
					* Converting string data to other basic types
					* Deferred internationalization
					* Text line processing
					* Parsing and manipulating name-value pairs
					* Classes for reading and mapping command line arguments
					* Associating formatting styles with strings
					* URI encoding/decoding
					* UTF encoding/decoding
				"""
			file_rule:
				exclude:
					"/buffer$"
					"/date-time$"
					"/string$"
					"/zstring$"

		cluster_tree:
			utility = utility
			description:
				"""
					Software Versioning and CRC digest
					
					Classes providing the following facilities:

					* Software version formatting and storing application build information
					* Cyclic redundancy checksum generation
				"""


