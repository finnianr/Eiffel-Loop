<?xml version="1.0" encoding="ISO-8859-1"?>
<!---->
<system name = "EL_base" library_target = "EL_base" uuid = "229b789e-09aa-11df-87c7-1bf8afd2bbad" xmlns = "http://www.eiffel.com/developers/xml/configuration-1-16-0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-16-0 http://www.eiffel.com/developers/xml/configuration-1-16-0.xsd">
	<target name = "EL_base">
		<description>
Base classes for Eiffel-Loop

Clusters:

* Data Structure
* Math
* Runtime
* Data Persistence
* Text Processing
* Utility
		</description>
		<root all_classes = "true"/>
		<option namespace = "Eiffel-Loop.Library" trace = "false" debug = "false" warning = "true" syntax = "standard" full_class_checking = "false" void_safety = "none">
			<assertions precondition = "true" postcondition = "true" check = "true" invariant = "false"/>
		</option>
		<mapping old_name = "ZSTRING" new_name = "EL_ZSTRING"/>
		<mapping old_name = "DIR_PATH" new_name = "EL_DIR_PATH"/>
		<mapping old_name = "FILE_PATH" new_name = "EL_FILE_PATH"/>
		<!--Needed for Windows XP-->
		<external_object location = "$EL_C_MSC_RUNTIME/spec/$ISE_PLATFORM/msvcr71.dll">
			<description>MS VC++ Runtime (for Windows XP)</description>
			<condition>
				<custom name = "shared" value = "true"/>
				<platform value = "windows"/>
				<custom name = "copy" value = "$location"/>
			</condition>
		</external_object>
		<!--ISE libraries-->
		<library name = "base" location = "$ISE_LIBRARY/library/base/base.ecf"/>
		<library name = "base_ext" location = "$ISE_LIBRARY/library/base_extension/base_extension.ecf"/>
		<library name = "encoding" location = "$ISE_LIBRARY/library/encoding/encoding.ecf"/>
		<library name = "ise_i18n" location = "$ISE_LIBRARY/library/i18n/i18n.ecf">
			<condition>
				<platform value = "windows"/>
			</condition>
		</library>
		<library name = "net" location = "$ISE_LIBRARY/library/net/net.ecf"/>
		<library name = "time" location = "$ISE_LIBRARY/library/time/time.ecf"/>
		<library name = "thread" location = "$ISE_LIBRARY/library/thread/thread.ecf"/>
		<library name = "uuid" location = "$ISE_LIBRARY/library/uuid/uuid.ecf"/>
		<!--CLUSTERS-->
		<cluster name = "data_structure" location = "data_structure" recursive = "true">
			<description>
Data Structure

Various hash-table, array, list, chain and linear types

See doc/base.data_structure.txt for details
			</description>
		</cluster>
		<cluster name = "math" location = "math" recursive = "true">
			<description>
Math

Some basic math classes for the following:

* 2D geometry
* Calculating integrals of arbitrary functions
* Representing column vectors
			</description>
		</cluster>
		<cluster name = "file" location = "runtime/file" recursive = "true">
			<description>
Files and Directories

Classes for the following:

* Naming files and directories
* Reading file properties
* Processing directory data
* Processing file data
* File transfer synchronization
			</description>
			<file_rule>
				<exclude>/imp_mswin$</exclude>
				<condition>
					<platform value = "unix"/>
				</condition>
			</file_rule>
			<file_rule>
				<exclude>/imp_unix$</exclude>
				<condition>
					<platform value = "windows"/>
				</condition>
			</file_rule>
		</cluster>
		<cluster name = "io" location = "runtime/io" recursive = "true">
			<description>
Input/Output

Classes for the following:

* Writing to the console with color highlighting
* Read user input data
			</description>
			<file_rule>
				<exclude>/imp_mswin$</exclude>
				<condition>
					<platform value = "unix"/>
				</condition>
			</file_rule>
			<file_rule>
				<exclude>/imp_unix$</exclude>
				<condition>
					<platform value = "windows"/>
				</condition>
			</file_rule>
		</cluster>
		<cluster name = "kernel" location = "kernel/base" recursive = "true">
			<description>
Kernel

Fundamental base classes
			</description>
			<file_rule>
				<exclude>/imp_mswin$</exclude>
				<condition>
					<platform value = "unix"/>
				</condition>
			</file_rule>
			<file_rule>
				<exclude>/imp_unix$</exclude>
				<condition>
					<platform value = "windows"/>
				</condition>
			</file_rule>
		</cluster>
		<cluster name = "reflection" location = "kernel/reflection" recursive = "true">
			<description>
Class Reflection

Building on the basic ISE reflection mechanisms, this cluster makes possible a very flexible way
of exchanging data between Eiffel objects and any structured plaintext format, and also a binary
memory block conforming to [$source EL_MEMORY_READER_WRITER] (inherits [$source SED_MEMORY_READER_WRITER])

See doc/base.reflection.txt for details
			</description>
		</cluster>
		<cluster name = "runtime" location = "runtime">
			<description>
Runtime Operations

Classes for the following:

* Exception handling
* Reading and writing from memory locations
* Accessing operating environment information
* Tracking progress of time consuming operations
* Managing shared resources for competing threads
			</description>
			<cluster name = "exception" location = "$|exception"/>
			<cluster name = "memory" location = "$|memory" recursive = "true">
				<file_rule>
					<exclude>/imp_mswin$</exclude>
					<condition>
						<platform value = "unix"/>
					</condition>
				</file_rule>
				<file_rule>
					<exclude>/imp_unix$</exclude>
					<condition>
						<platform value = "windows"/>
					</condition>
				</file_rule>
			</cluster>
			<cluster name = "process" location = "$|process" recursive = "true">
				<file_rule>
					<exclude>/imp_mswin$</exclude>
					<condition>
						<platform value = "unix"/>
					</condition>
				</file_rule>
				<file_rule>
					<exclude>/imp_unix$</exclude>
					<condition>
						<platform value = "windows"/>
					</condition>
				</file_rule>
			</cluster>
			<cluster name = "progress_track" location = "$|progress-track" recursive = "true"/>
			<cluster name = "resource_share" location = "$|resource-share" recursive = "true"/>
		</cluster>
		<cluster name = "persistency" location = "persistency" recursive = "true">
			<description>
Data Persistence

Classes providing the following facilities:

* Reading and writing arrays of floating-point type [$source REAL_64].
* Files that notify a listener of byte-count written and read.
* A file conforming to [$source PLAIN_TEXT_FILE] that implements [$source EL_OUTPUT_MEDIUM]
* File line source and other abstractions
			</description>
		</cluster>
		<cluster name = "buffer" location = "text/buffer" recursive = "true">
			<description>
String Buffering

Classes for buffering string data in shared objects
			</description>
		</cluster>
		<cluster name = "string" location = "text/string" recursive = "true">
			<description>
String Handling

Classes providing the following:

* Managing lists of strings
* String escaping
* Efficient string splitting
* Recording and managing string edit histories
* Abstractions for objects createable from strings
* String occurrence interval lists
			</description>
		</cluster>
		<cluster name = "zstring" location = "text/zstring" recursive = "true">
			<description>
Class ZSTRING

An implementation of a memory compact string with the same unicode character range as the &apos;&apos;base.ecf&apos;&apos;
class [$source STRING_32] and conforming to [$source STRING_GENERAL].
The [$source ZSTRING] class (alias for [$source EL_ZSTRING]) has many additional
routines not found in [$source STRING_32], as for example: Python like tuple substitution.

**See Articles**

* [https://www.eiffel.org/blog/finnianr/zstring_released_in_eiffelloop_131 ZSTRING released in Eiffel-Loop 1.3.1]
* [https://www.eiffel.org/blog/finnianr/introducing_class_zstring Introducing class ZSTRING]
* [https://www.eiffel.org/article/iso8859_is_dead_long_live_iso8859 ISO-8859 is dead, long live ISO-8859]

**Benchmarks [$source ZSTRING] vs [$source STRING_32]**

* [./benchmark/ZSTRING-benchmarks-latin-1.html Base character-set Latin-1]
* [./benchmark/ZSTRING-benchmarks-latin-15.html Base character-set Latin-15]
			</description>
		</cluster>
		<cluster name = "text" location = "text">
			<description>
Text Processing

Classes providing the following:

* Character and character sequence conversion
* Character encoding
* Class and routine naming-convention translation
* Converting string data to other basic types
* Deferred internationalization
* Text line processing
* Parsing and manipulating name-value pairs
* Classes for reading and mapping command line arguments
* Associating formatting styles with strings
* URI encoding/decoding
* UTF encoding/decoding
			</description>
			<cluster name = "command_line" location = "$|command-line" recursive = "true"/>
			<cluster name = "text_encoding" location = "$|encoding" recursive = "true"/>
			<cluster name = "line_traversal" location = "$|line-traversal" recursive = "true"/>
			<cluster name = "name_value" location = "$|name-value" recursive = "true"/>
			<cluster name = "naming" location = "$|naming" recursive = "true"/>
			<cluster name = "convert" location = "$|convert" recursive = "true"/>
			<cluster name = "character" location = "$|character"/>
			<cluster name = "error" location = "$|error"/>
			<cluster name = "general" location = "$|general"/>
			<cluster name = "i18n" location = "$|i18n"/>
			<cluster name = "styled" location = "$|styled"/>
		</cluster>
		<cluster name = "utility" location = "utility" recursive = "true">
			<description>
Utility

Classes providing the following facilities:

* Benchmarking
* Memory writing
* Cyclic redundancy check
* Command shells
* Extensions to ES uuid.ecf
			</description>
		</cluster>
	</target>
</system>
