pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"; uuid = "229b7448-09aa-11df-87bc-335404ca99d5" 
	name = EL_public_key_encryption; library_target = EL_public_key_encryption
	description: 
		"""
			RSA Public-key Encryption

			Extends Colin LeMahieu's arbitrary precision integer library to conform to some RSA standards.
			The most important is the ability to read key-pairs conforming to the
			[https://en.wikipedia.org/wiki/X.509#Sample_X.509_certificates X509 PKCS1 standard].
			The top level class to access these facilities is ${EL_MODULE_X509_COMMAND}.

			The private key reader however uses a non-standard encryption scheme. It assumes the file
			is en	crypted using the Eiffel-Loop utility contained in `el_toolkit'.
			See class ${CRYPTO_APP} for details.
		"""
	target:
		name = EL_public_key_encryption
		root:
			all_classes = true

		option:
			namespace = "Eiffel-Loop.Library.PKE"
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug=false; warning=true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"
			time = "time/time.ecf"

		# ISE contributions
		variable:
			eapml_limb_type = natural_32
		libraries:
			location = "$ISE_LIBRARY/contrib/library"
			encryption_base = "text/encryption/eel/eel.ecf"
			integer_x = "math/eapml/eapml.ecf"

		# Eiffel-Loop
		libraries:
			EL_base = "base/base.ecf"
			EL_compression = "compression.ecf"
			EL_eco_db = "Eco-DB.ecf"
			EL_encryption = "encryption.ecf"
			EL_file_process = "file-processing.ecf"
			EL_os_command = "os-command.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_text_process = "text-process.ecf"

		# Source code
		cluster_tree:
			RSA_public_key = "text/rsa-encryption"
			platform_list:
				"imp_mswin; imp_unix"

