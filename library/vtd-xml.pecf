pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"; uuid = "229b77d6-09aa-11df-87c5-b77da3e246d9" 
	name = EL_vtd_xml; library_target = EL_vtd_xml
	description: 
		"""
			XML parsing and Xpath navigation with VTD-XML

			Classes for scanning XML documents and building Eiffel objects from XML contexts
			defined by relative Xpaths. Based on the [http://vtd-xml.sourceforge.net/ VTD-XML parser].
			This is a full implemenation of Xpath 1.0.

			VTD-XML uses a very fast and efficient method of building a compressed representation of
			an XML object using [http://vtd-xml.sourceforge.net/VTD.html virtual token descriptors].

			Using the Eiffel API is considerably easier and more intuitive to use than the original
			Java or C version of VTD-XML.

			A substantial C-bridge was developed to make Eiffel work better with VTD-XML.
			The original VTX-XML code was forked to make it possible to compile it with the MSC compiler.
			This fork is found under `contrib/C'.

			Test class [$source VTD_XML_AUTOTEST_APP]
		"""
	target:
		name = EL_vtd_xml
		root:
			all_classes = true
		option:
			namespace = "Eiffel-Loop.Library.VTD-XML"
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		external_include: 
			location = "$(EL_C_LIB)/include"
			description:
				"""
					C implementation of EL_C_CALLABLE_PROCEDURE
				"""
		external_include: 
			location = "$(EL_C_LIB)/vtd2eiffel/source"

		windows_externals:
			external_object:
				location = "$(EL_C_LIB)/vtd2eiffel/spec/$(ISE_PLATFORM)/vtd-xml.lib"
		
		unix_externals:
			external_object:
				location = "-L$(EL_C_LIB)/vtd2eiffel/spec/$(ISE_PLATFORM) -lvtd-xml"
			external_linker_flag:
				value = "-L$(EL_C_LIB)/vtd2eiffel/spec/$(ISE_PLATFORM) -lvtd-xml"
		
		# Experiment to see if calling scons with pre-compile action is practical
		#pre_compile_action:
		#	working_directory = "$EL_C_LIB/vtd2eiffel"; command = "cmd /c scons && pause"

		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"
			time = "time/time.ecf"

		# Eiffel-Loop libraries
		libraries:
			EL_base = "base/base.ecf"
			EL_c_api = "C-language-interface.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_file_process = "file-processing.ecf"
			EL_text_formats = "text-formats.ecf"
			EL_text_process = "text-process.ecf"

		# Source code
		cluster_tree:
			vtd_xml = "persistency/xml/vtd-xml"
			platform_list:
				"imp_mswin; imp_unix"



