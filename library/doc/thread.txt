**Work Distribution**

Classes ${EL_PROCEDURE_DISTRIBUTER} and ${EL_FUNCTION_DISTRIBUTER}
offer a convenient way to distribute the work of executing routines using a specific number of cores.
See routine `read_source_files' in class ${EIFFEL_CONFIGURATION_FILE} for an example.

**Producer-Consumer Framework**

A generic producer-consumer thread communication framework where a producing thread places products onto a queue for consumption by a consumer thread.

''Features''

* Implementation of a single consumer thread consuming the products of a single worker thread.
* Implementation of multiple consumer threads consuming the products of a single worker thread.
* Vision2 extension allowing products of a thread to be consumed by the main GUI application thread.
* Specialized consumer-producer thread classes for agent action consuming.

''Consumer Descendants''

	EL_CONSUMER* [P]
		${EL_LOGGED_CONSUMER* [P]}
		${EL_CONSUMER_MAIN_THREAD* [P]}
			${EL_COUNT_CONSUMER_MAIN_THREAD*}
				${EL_TIMED_PROCEDURE_MAIN_THREAD}
			${EL_MAIN_THREAD_REGULAR_INTERVAL_EVENT_CONSUMER*}
			${EL_PROCEDURE_CALL_CONSUMER_MAIN_THREAD}
			${EL_ACTION_ARGUMENTS_CONSUMER_MAIN_THREAD [OPEN_ARGS -> TUPLE create default_create end]}
		${EL_CONSUMER_THREAD* [P]}
			${EL_MANY_TO_ONE_CONSUMER_THREAD* [P]}
				${EL_LOGGED_MANY_TO_ONE_CONSUMER_THREAD* [P]}
			${EL_COUNT_CONSUMER_THREAD*}
				${EL_TIMED_PROCEDURE_THREAD}
			${EL_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
				${EL_LOGGED_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
			${EL_PROCEDURE_CALL_CONSUMER_THREAD}
			${EL_THREAD_REGULAR_INTERVAL_EVENT_CONSUMER*}
			${EL_XML_NETWORK_MESSENGER}
			${EL_LOGGED_CONSUMER_THREAD* [P]}
				${EL_LOGGED_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
				${EL_LOGGED_MANY_TO_ONE_CONSUMER_THREAD* [P]}
			${EL_ACTION_ARGUMENTS_CONSUMER_THREAD [OPEN_ARGS -> TUPLE create default_create end]}
				${EL_BATCH_FILE_PROCESSING_THREAD*}
					${EL_LOGGED_BATCH_FILE_PROCESSING_THREAD*}
		${EL_REGULAR_INTERVAL_EVENT_CONSUMER*}
			${EL_MAIN_THREAD_REGULAR_INTERVAL_EVENT_CONSUMER*}
			${EL_THREAD_REGULAR_INTERVAL_EVENT_CONSUMER*}
		${EL_COUNT_CONSUMER*}
			${EL_COUNT_CONSUMER_THREAD*}
			${EL_COUNT_CONSUMER_MAIN_THREAD*}
			${EL_TIMED_PROCEDURE*}
				${EL_TIMED_PROCEDURE_MAIN_THREAD}
				${EL_TIMED_PROCEDURE_THREAD}
		${EL_PROCEDURE_CALL_CONSUMER*}
			${EL_PROCEDURE_CALL_CONSUMER_MAIN_THREAD}
			${EL_PROCEDURE_CALL_CONSUMER_THREAD}
		${EL_ACTION_ARGUMENTS_CONSUMER* [OPEN_ARGS -> TUPLE create default_create end]}
			${EL_ACTION_ARGUMENTS_CONSUMER_THREAD [OPEN_ARGS -> TUPLE create default_create end]}
			${EL_ACTION_ARGUMENTS_CONSUMER_MAIN_THREAD [OPEN_ARGS -> TUPLE create default_create end]}
		${EL_NONE_CONSUMER [P]}

''Product Queue Descendants''

	EL_THREAD_PRODUCT_QUEUE [P]
		${EL_PROCEDURE_CALL_QUEUE}
		${EL_LOGGED_THREAD_PRODUCT_QUEUE [P]}
		${EL_ONE_TO_MANY_THREAD_PRODUCT_QUEUE [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}

**Specialized Threads**

The library includes many thread classes inheriting from ${EL_IDENTIFIED_THREAD_I} that perform specialized tasks.

''Examples''

* Intermittently repeat an action with a specified sleep interval until signaled to stop.
* Continuously repeat an action until signaled to stop.
* Continuously repeat an action until receiving a signal to suspend or exit. Remains suspended unless signaled to resume or exit.

''Descendants''

	EL_IDENTIFIED_THREAD_I*
		${EL_IDENTIFIED_THREAD*}
			${EL_FILE_PROCESS_THREAD}
				${EL_LOGGED_FILE_PROCESS_THREAD}
			${EL_WORKER_THREAD}
			${EL_TIMEOUT_THREAD}
			${EL_CONTINUOUS_ACTION_THREAD*}
				${EL_CONSUMER_THREAD* [P]}
					${EL_MANY_TO_ONE_CONSUMER_THREAD* [P]}
						${EL_LOGGED_MANY_TO_ONE_CONSUMER_THREAD* [P]}
					${EL_COUNT_CONSUMER_THREAD*}
						${EL_TIMED_PROCEDURE_THREAD}
					${EL_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
						${EL_LOGGED_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
					${EL_PROCEDURE_CALL_CONSUMER_THREAD}
					${EL_THREAD_REGULAR_INTERVAL_EVENT_CONSUMER*}
					${EL_XML_NETWORK_MESSENGER}
					${EL_LOGGED_CONSUMER_THREAD* [P]}
						${EL_LOGGED_DELEGATING_CONSUMER_THREAD [P, CONSUMER_TYPE -> EL_MANY_TO_ONE_CONSUMER_THREAD [P] create make end]}
						${EL_LOGGED_MANY_TO_ONE_CONSUMER_THREAD* [P]}
					${EL_ACTION_ARGUMENTS_CONSUMER_THREAD [OPEN_ARGS -> TUPLE create default_create end]}
						${EL_BATCH_FILE_PROCESSING_THREAD*}
							${EL_LOGGED_BATCH_FILE_PROCESSING_THREAD*}
				${EL_DORMANT_ACTION_LOOP_THREAD*}
					${EL_REGULAR_INTERVAL_EVENT_PRODUCER}
						${EL_LOGGED_REGULAR_INTERVAL_EVENT_PRODUCER}
				${EL_RHYTHMIC_ACTION_THREAD*}
					${EL_TIMED_COUNT_PRODUCER}
					${EL_TIMEOUT}
						${EL_LOGGED_TIMEOUT}
				${EL_WORK_DISTRIBUTION_THREAD}
					${EL_LOGGED_WORK_DISTRIBUTION_THREAD}
			${EL_LOGGED_IDENTIFIED_THREAD*}
				${SIMPLE_SERVER_THREAD}
				${EL_LOGGED_CONSUMER_THREAD* [P]}
				${EL_LOGGED_WORK_DISTRIBUTION_THREAD}
				${EROS_SERVER_THREAD [TYPES -> TUPLE create default_create end]}
		${EL_IDENTIFIED_MAIN_THREAD}


**Other Features**

* A Vision2 extension framework for building proxy interfaces to GUI components that are callable from non-GUI threads. Allows non-GUI threads to asynchronously call routines that call Vision2 routines.
* Intermittent timed event framework
* Container cell class for numeric types shared across threads. Features thread safe increment, decrement, add and subtract operations.
* Thread safe queue and stack container classes.

