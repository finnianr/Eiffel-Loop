pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"
	name = EL_image_utils; library_target = EL_image_utils; uuid = "229b6cc8-09aa-11df-87a9-ffc4e5fcb1e7" 
	
	description: 
		"""
			Image Utilities

			Image utilities providing:

			1. SVG to PNG conversion using C library [http://librsvg.sourceforge.net/ librsvg]
			2. Miscellaneous routines from the [https://cairographics.org/ Cairo graphics C library]
		"""
	target:
		name = EL_image_utils
		root:
			all_classes = true
		option:
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		# Common includes
		external_include:
			location = "$(EL_C_LIB)/include"
		external_include:
			location = "$(EL_C_LIB)/image-utils/source"

		windows_externals:
			external_include:
				location = "$(EL_C_CAIRO)/include/cairo"
			external_include:
				location = "$(EL_C_CAIRO)/include/librsvg-2.0/librsvg"
			external_include: 
				location = "$(EL_C_CAIRO)/include/glib-2.0"
			external_include: 
				location = "$(EL_C_CAIRO)/lib/glib-2.0/include"

		# Unix includes
		unix_externals:
			external_include:
				location = "/usr/include/cairo"
			external_include:
				location = "/usr/include/librsvg-2.0/librsvg"
			external_include:
				location = "/usr/include/glib-2.0"
			# Needs to be a way to select the 32 bit version but how?
			external_include: 
				location = "/usr/lib/x86_64-linux-gnu/glib-2.0/include"

		# For Windows
		# The following objects are excluded from being linked because they are intended for dynamic linking at runtime. 
		# They are included to trigger SCons build scripts.
		variable:
			link_object = false

		windows_externals:
			external_object:
				location = "$(EL_C_LIB)/image-utils/spec/$(ISE_PLATFORM)/elimageutils.dll"
				description:
					"""
						elimageutils.dll requires:
						$EL_C_LIB/image-utils/spec/$ISE_PLATFORM/elimageutils.dll
					"""
				condition:
					custom:
						link_object = true

			external_object:
				location = "$(EL_C_CAIRO)/spec/$(ISE_PLATFORM)/libcairo-2.dll"
				description:
					"""
						libcairo-2.dll requires:
						$EL_C_CAIRO/spec/$ISE_PLATFORM/*.dll
					"""
				condition:
					custom:
						link_object = true

		# For Unix
		external_object:
			location = "$(EL_C_LIB)/image-utils/spec/$(ISE_PLATFORM)/libelimageutils.so"
			description:
				"""
					libelimageutils.so requires:
					$EL_C_LIB/image-utils/spec/$ISE_PLATFORM/libelimageutils.so
				"""
			condition:
				platform = unix
				custom:
					link_object = true

		library: 
			base = "$ISE_LIBRARY/library/base/base.ecf"

		# Eiffel-Loop
		libraries:
			EL_base = "base/base.ecf"
			EL_c_api = "C-language-interface.ecf"
			EL_os_command = "os-command.ecf"
			EL_pyxis_scan = "pyxis-scan.ecf"

		# Source code
		cluster_tree:
			image_utils = "graphic/image/utils"
			platform_list:
				"imp_mswin; imp_unix"


