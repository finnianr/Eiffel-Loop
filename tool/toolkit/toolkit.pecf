pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

# Pyxis as an acronym stands for: Pythonic XML ideal source.
# It is also a Latin transliteration of a Greek word for a type of pottery used by women to hold 
# cosmetics, trinkets or jewellery. 

system:
	configuration_ns = "1-16-0"
	name = el_toolkit; uuid = "7B1312E8-019E-4B01-B160-744B3B2E1915"
	description:
		"""
			Utilities Toolkit

			A "Swiss-army knife" of command line utilities accessible via a command line option.
			
			See doc/toolkit.txt for details.
		"""
	
	# "Swiss army knife" toolkit containing a suite of command line tools for Eiffel development
	target: 
		name = classic

		root:
			class = APPLICATION_ROOT; feature = make
		version:
			major = 1; minor = 8; release = 0; build = 609
			company = "Eiffel-Loop"; product = "toolkit"
			copyright = "Finnian Reilly"

		option: 
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true

			assertions:
				precondition = true; postcondition = true; check = true; invariant = false

		settings:
			address_expression = false; array_optimization = false
			check_vape = true; console_application = true; concurrency = thread
			dead_code_removal = true; dynamic_runtime = false
			exception_trace = false
			inlining = true; inlining_size = 3
			line_generation = false

		precompile: 
			precompile = "$ISE_PRECOMP/EL/console-application.ecf"
			
		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			ise_base = "base/base.ecf"
			ise_base_ext = "base_extension/base_extension.ecf"
			time = "time/time.ecf"
			testing = "testing/testing.ecf"

		# ISE contributions
		variable:
			eapml_limb_type = natural_32
		libraries:
			location = "$ISE_LIBRARY/contrib/library"
			ise_integer_x = "math/eapml/eapml.ecf"
			ise_encryption = "text/encryption/eel/eel.ecf"

		# Eiffel-Loop contributions
		libraries:
			nel_fft_math = "$EIFFEL_LOOP/contrib/Eiffel/NEL-math/fft-math.ecf"

		# Eiffel-Loop
		writeable_libraries:
			location = "$EIFFEL_LOOP/library"
			EL_app_license_keys = "app-license-keys.ecf"
			EL_base = "base/base.ecf"
			EL_app_manage = "app-manage.ecf"
			EL_compression = "compression.ecf"
			EL_encryption = "encryption.ecf"
			EL_file_process = "file-processing.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_http_client = "http-client.ecf"
			EL_i18n = "i18n.ecf"
			EL_logging = "logging.ecf"
			EL_image_utils = "image-utils.ecf"
			EL_multimedia = "multi-media.ecf"
			EL_network = "network.ecf"
			EL_os_command = "os-command.ecf"
			EL_public_key_encryption = "public-key-encryption.ecf"
			EL_pyxis_scan = "pyxis-scan.ecf"
			EL_markup_docs = "markup-docs.ecf"
			EL_testing = "testing.ecf"
			EL_text_formats = "text-formats.ecf"
			EL_text_process = "text-process.ecf"

			EL_vtd_xml = "vtd-xml.ecf"
			EL_xml_scan = "xml-scan.ecf"

			EL_doc_scan = "document-scan.ecf"

		cluster_tree:
			project = source

		cluster:
			test_common = "$EIFFEL_LOOP/test/source/common"
			sub_clusters:
				support = "support"


