pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Pyxis is data format inspired by the Python programming language and designed to be a more
# readable supplement/substitute for XML configuration files.

system:
	configuration_ns = "1-16-0"
	name = el_eiffel; uuid = "EEA36E90-5A49-11E7-8290-A34D58BF65CD"
	description:
		"""
			Eiffel Development Utilities
			
			See doc/eiffel-utility.txt for details.
		"""
	
	# "Swiss army knife" toolkit containing a suite of command line tools for Eiffel development
	target: 
		name = classic
		root:
			class = APPLICATION_ROOT; feature = make
		version:
			major = 1; minor = 8; release = 2; build = 528
			company = "Eiffel-Loop"; product = "eiffel"
			copyright = "Finnian Reilly"

		option: 
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = false

		settings:
			address_expression = false; array_optimization = false
			check_vape = true; console_application = true; concurrency = thread
			dead_code_removal = true; dynamic_runtime = false
			exception_trace = false
			inlining = true; inlining_size = 3
			line_generation = false

		precompile: 
			precompile = "$ISE_PRECOMP/EL/console-application.ecf"
			
		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"; base_ext = "base_extension/base_extension.ecf"
			time = "time/time.ecf"
			testing = "testing/testing.ecf"

		variable:
			eapml_limb_type = natural_32
		library:
			integer_x = "$ISE_LIBRARY/contrib/library/math/eapml/eapml.ecf"

		# Eiffel-Loop
		writeable_libraries:
			location = "$EIFFEL_LOOP/library"
			EL_app_manage = "app-manage.ecf"
			EL_base = "base/base.ecf"
			EL_doc_scan = "document-scan.ecf"
			EL_encryption = "encryption.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_i18n = "i18n.ecf"
			option:
				assertions:
					precondition = true; postcondition = true; check = false; invariant = false
			EL_logging = "logging.ecf"
			EL_network = "network.ecf"
			EL_os_command = "os-command.ecf"
			EL_pyxis_scan = "pyxis-scan.ecf"
			EL_text_formats = "text-formats.ecf"
			EL_text_process = "text-process.ecf"
			EL_text_process_fast = "text-process-fast.ecf"
			renaming_map:
				EL_EIFFEL_TEXT_PATTERN_FACTORY = EL_EIFFEL_TEXT_PATTERN_FACTORY_2
				EL_FIRST_MATCH_IN_LIST_TP = EL_FIRST_MATCH_IN_LIST_TP_2
				EL_MATCH_ALL_IN_LIST_TP = EL_MATCH_ALL_IN_LIST_TP_2
				EL_PARSER = EL_PARSER_2
				EL_TEXT_PATTERN_FACTORY = EL_TEXT_PATTERN_FACTORY_2
				EL_TEXT_PATTERN = EL_TEXT_PATTERN_2

			EL_testing = "testing.ecf"
			EL_thread = "thread.ecf"
			EL_vtd_xml = "vtd-xml.ecf"
			EL_xml_scan = "xml-scan.ecf"

		cluster_tree:
			root = "source/root"
			description:
				"""
					Eiffel Development Utilities

					A "Swiss-army knife" of Eiffel development utilities invokeable by a command-line switch.
			
					See doc/eiffel.root.txt for details.
				"""
		cluster_tree:
			edit = "source/edit"
			description:
				"""
					Eiffel Class Editing Utilities

					A "Swiss-army knife" of Eiffel class editing utilities invokeable by a command-line switch.
			
					See doc/eiffel.edit.txt for details.
				"""
		cluster_tree:
			analyse = "source/analyse"
			description:
				"""
					Eiffel Class Analysis Utilities

					A "Swiss-army knife" of Eiffel class analysis utilities invokeable by a command-line switch.
			
					See doc/eiffel.analyse.txt for details.
				"""
		cluster_tree:
			test = "source/test"
			description:
				"""
					Eiffel Utility Tests

					Test sets for Eiffel utitlities
				"""
		cluster:
			Test_common = "$EIFFEL_LOOP/test/source/common"
			sub_clusters:
				ftp = ftp; support = support

