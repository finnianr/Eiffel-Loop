<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	Pyxis is data format inspired by the Python programming language and designed to be a more
	readable supplement/substitute for XML configuration files.
	
	Pyxis as an acronym stands for: Pythonic XML ideal source.
	It is also a Latin transliteration of a Greek word for a type of pottery used by women to hold
	cosmetics, trinkets or jewellery.
	
	The following is project configuration data for an Eiffel programming language project
	compiled with the EiffelStudio IDE
	
	This project contains a parser for the Pyxis format and a Pyxis to XML convertion utility
-->
<system name = "el_graphical" uuid = "229b7a2e-09aa-11df-87cb-6f5c8d784696" xmlns = "http://www.eiffel.com/developers/xml/configuration-1-16-0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-16-0 http://www.eiffel.com/developers/xml/configuration-1-16-0.xsd">
	<description>
Vision-2 Extensions Demo

Test applications for selected components from Eiffel-Loop extension libraries for Vision-2
graphics and panel docking libraries.

* [./library/vision2-x.pango_cairo.html Pango-Cairo 2D Graphics]
* [./library/vision2-x.graphics.html Vision2-X 2D Graphics]
* [./library/vision2-x.pixmap.html Vision2-X Pixmap Extensions]
* [./library/vision2-x.container.html Vision2-X UI Container Extensions]
* [./library/vision2-x.extensions.html Vision2-X UI Extensions]
* [./library/vision2-x.widget.html Vision2-X UI Widget Extensions]
	</description>
	<!--classic means C code as an intermediate language-->
	<target name = "classic">
		<root class = "APPLICATION_ROOT" feature = "make"/>
		<version major = "1" minor = "0" release = "0" build = "48" company = "Eiffel-Loop" product = "graphical" copyright = "Finnian Reilly"/>
		<option syntax = "standard" full_class_checking = "false" void_safety = "none" trace = "false" debug = "false" warning = "true">
			<assertions precondition = "true" postcondition = "true" check = "false" invariant = "false"/>
			<debug name = "__unnamed_debug__" enabled = "false"/>
			<debug name = "dlg_dispatcher" enabled = "false"/>
			<debug name = "refactor_fixme" enabled = "false"/>
			<debug name = "vision2_windows" enabled = "false"/>
			<debug name = "vision2_windows_gdi" enabled = "false"/>
			<debug name = "wel" enabled = "false"/>
			<debug name = "wel_gdi_count" enabled = "false"/>
			<debug name = "wel_gdi_references" enabled = "false"/>
			<debug name = "win_dispatcher" enabled = "false"/>
			<warning name = "export_class_missing" enabled = "false"/>
			<warning name = "old_verbatim_strings" enabled = "false"/>
			<warning name = "syntax" enabled = "false"/>
			<warning name = "vjrv" enabled = "false"/>
		</option>
		<setting name = "address_expression" value = "false"/>
		<setting name = "array_optimization" value = "false"/>
		<setting name = "check_vape" value = "true"/>
		<setting name = "console_application" value = "true"/>
		<setting name = "dead_code_removal" value = "true"/>
		<setting name = "dynamic_runtime" value = "false"/>
		<setting name = "exception_trace" value = "false"/>
		<setting name = "inlining" value = "false"/>
		<setting name = "line_generation" value = "false"/>
		<setting name = "concurrency" value = "thread"/>
		<precompile name = "precompile" location = "$ISE_PRECOMP/EL/GUI-application.ecf"/>
		<library name = "base" location = "$ISE_LIBRARY/library/base/base.ecf"/>
		<library name = "thread" location = "$ISE_LIBRARY/library/thread/thread.ecf"/>
		<library name = "time" location = "$ISE_LIBRARY/library/time/time.ecf"/>
		<!--Eiffel Loop overrides-->
		<library name = "vision2" location = "$EIFFEL_LOOP/library/override/ES-vision2.ecf" readonly = "false">
			<option>
				<assertions precondition = "true" postcondition = "true" check = "true"/>
			</option>
		</library>
		<library name = "docking" location = "$EIFFEL_LOOP/library/override/ES-docking.ecf" readonly = "false">
			<option>
				<assertions precondition = "true" postcondition = "true" check = "true"/>
			</option>
		</library>
		<!--Eiffel Loop libraries-->
		<library name = "EL_app_manage" location = "$EIFFEL_LOOP/library/app-manage.ecf" readonly = "false"/>
		<library name = "EL_base" location = "$EIFFEL_LOOP/library/base/base.ecf" readonly = "false"/>
		<library name = "EL_c_api" location = "$EIFFEL_LOOP/library/C-language-interface.ecf" readonly = "false"/>
		<library name = "EL_doc_scan" location = "$EIFFEL_LOOP/library/document-scan.ecf" readonly = "false"/>
		<library name = "EL_logging" location = "$EIFFEL_LOOP/library/logging.ecf" readonly = "false"/>
		<library name = "EL_image_utils" location = "$EIFFEL_LOOP/library/image-utils.ecf" readonly = "false"/>
		<library name = "EL_os_command" location = "$EIFFEL_LOOP/library/os-command.ecf" readonly = "false"/>
		<library name = "EL_pyxis_scan" location = "$EIFFEL_LOOP/library/pyxis-scan.ecf" readonly = "false"/>
		<library name = "EL_search" location = "$EIFFEL_LOOP/library/search-engine.ecf" readonly = "false"/>
		<library name = "EL_thread" location = "$EIFFEL_LOOP/library/thread.ecf" readonly = "false"/>
		<library name = "EL_vision2" location = "$EIFFEL_LOOP/library/vision2-x.ecf" readonly = "false"/>
		<library name = "EL_wel_x" location = "$EIFFEL_LOOP/library/wel-x.ecf" readonly = "false">
			<condition>
				<platform value = "windows"/>
			</condition>
		</library>
		<library name = "EL_xml_scan" location = "$EIFFEL_LOOP/library/xml-scan.ecf" readonly = "false"/>
		<cluster name = "project" location = "source" recursive = "true"/>
	</target>
</system>
