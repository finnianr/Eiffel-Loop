pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

system:
	configuration_ns = "1-16-0"
	name = el_signal_math; uuid = "4D69A6C6-DB68-46AC-9B3B-3A29B2E260AF"
	description:
		"""
			Signal Math Demo of the EROS Protocol

			See cluster[@name='project']/description below for more details
		"""
	
	# classic means C code as an intermediate language
	target: 
		name = classic
		root:
			class = APPLICATION_ROOT; feature = make
		version:
			major = 1; minor = 0; release = 0; build = 1
			company = "Eiffel-Loop"; product = "EROS"
			copyright = "Finnian Reilly"
		option:
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true

			assertions:
				precondition = true; postcondition = true; check = true; invariant = true

		settings:
			address_expression = false; array_optimization = false
			check_vape = true; console_application = true
			dead_code_removal = true; dynamic_runtime = false
			exception_trace = false
			line_generation = false; inlining = true; inlining_size = 2
			concurrency = thread

		precompile: 
			precompile = "$ISE_PRECOMP/EL/console-application.ecf"

		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"
			thread = "thread/thread.ecf"
			time = "time/time.ecf"
			net = "net/net.ecf"

		library:
			nel_fft_math = "$EIFFEL_LOOP/contrib/Eiffel/NEL-math/fft-math.ecf"

		# Eiffel Loop libraries
		variable:
			eros_server_enabled = false

		writeable_libraries:
			location = "$EIFFEL_LOOP/library"
			EL_base = "base/base.ecf"
			EL_app_manage = "app-manage.ecf"
			EL_doc_scan = "document-scan.ecf"
			EL_eros = "eros.ecf"
			EL_evolicity = "evolicity.ecf"
			EL_logging = "logging.ecf"
			EL_net_base = "network.ecf"
			EL_xml_scan = "xml-scan.ecf"

		cluster_tree:
			project = source
			description:
				"""
					Signal Math Demo of the EROS Protocol

					A multi-mode application demonstrating the [./library/eros.html EROS remote object protocol].
					The application calculates Fourier transformations based on Greg Lee's
					[https://teameiffel.blogspot.com/2006/04/greg-lees-numeric-eiffel-library.html Numeric Eiffel Library].
					It has two client modes and two server modes, accessible via a command line option.

					See doc/signal-math.txt for details
				"""
		cluster_tree:
			eros_test = "$EIFFEL_LOOP/test/source/eros"
		cluster_tree:
			install = "../server/source/install"
			

