<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	Copyright (C) 2016-2017  Gerrit Leder, Finnian Reilly
	
	Gerrit Leder, Overather Str. 10, 51429 Bergisch-Gladbach, GERMANY
	gerrit.leder@gmail.com
	
	Finnian Reilly, Dunboyne, Co Meath, Ireland.
	finnian@eiffel-loop.com
-->
<system name = "el_protein" uuid = "b0730f54-4478-11e7-b58e-cfc186372549" xmlns = "http://www.eiffel.com/developers/xml/configuration-1-16-0" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.eiffel.com/developers/xml/configuration-1-16-0 http://www.eiffel.com/developers/xml/configuration-1-16-0.xsd">
	<description>
Protein Folding using 2D HP model

Various implementations of an optimal protein folding algorithm using the 2D HP model
Includes both a single and multi-core implementation.

This project was a joint collaboration between Gerrit Leder and Finnian Reilly.
Gerrit developed the implemented the 2D HP algorithm in Eiffel and Finnian optimized
it&apos;s performance and created a multi-core parallel computation version.

The multi-core version showcases the Eiffel-Loop class [$source EL_PROCEDURE_DISTRIBUTER].

See: [https://sourceforge.net/p/pfhp/PF_HP-mt Sourceforge repository PF_HP-mt]
	</description>
	<target name = "classic">
		<root class = "APPLICATION_ROOT" feature = "make"/>
		<version major = "2" minor = "0" release = "0" build = "133" company = "Eiffel-Loop" product = "PF_HP" copyright = "Finnian Reilly &amp; Gerrit Leder"/>
		<option syntax = "standard" full_class_checking = "false" void_safety = "none" trace = "false" debug = "false" warning = "true">
			<assertions precondition = "true" postcondition = "true" check = "true" invariant = "false"/>
		</option>
		<setting name = "address_expression" value = "false"/>
		<setting name = "array_optimization" value = "false"/>
		<setting name = "check_vape" value = "true"/>
		<setting name = "console_application" value = "true"/>
		<setting name = "dead_code_removal" value = "true"/>
		<setting name = "dynamic_runtime" value = "false"/>
		<setting name = "exception_trace" value = "false"/>
		<setting name = "line_generation" value = "false"/>
		<setting name = "inlining" value = "true"/>
		<setting name = "inlining_size" value = "3"/>
		<setting name = "concurrency" value = "thread"/>
		<precompile name = "precompile" location = "$ISE_PRECOMP/EL/console-application.ecf"/>
		<!--ISE libraries-->
		<library name = "base" location = "$ISE_LIBRARY/library/base/base.ecf"/>
		<library name = "base_ext" location = "$ISE_LIBRARY/library/base_extension/base_extension.ecf"/>
		<library name = "testing" location = "$ISE_LIBRARY/library/testing/testing.ecf"/>
		<library name = "time" location = "$ISE_LIBRARY/library/time/time.ecf"/>
		<library name = "gobo_base" location = "$EIFFEL_LOOP/library/gobo-base.ecf"/>
		<!--Eiffel-Loop-->
		<library name = "EL_base" location = "$EIFFEL_LOOP/library/base/base.ecf" readonly = "false"/>
		<library name = "EL_app_manage" location = "$EIFFEL_LOOP/library/app-manage.ecf" readonly = "false"/>
		<library name = "EL_os_command" location = "$EIFFEL_LOOP/library/os-command.ecf" readonly = "false"/>
		<library name = "EL_logging" location = "$EIFFEL_LOOP/library/logging.ecf" readonly = "false"/>
		<library name = "EL_testing" location = "$EIFFEL_LOOP/library/testing.ecf" readonly = "false"/>
		<library name = "EL_thread" location = "$EIFFEL_LOOP/library/thread.ecf" readonly = "false"/>
		<library name = "EL_vtd_xml" location = "$EIFFEL_LOOP/library/vtd-xml.ecf" readonly = "false"/>
		<!--Sources-->
		<cluster name = "project" location = "source" recursive = "true"/>
	</target>
</system>
