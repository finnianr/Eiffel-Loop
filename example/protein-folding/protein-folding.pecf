pyxis-doc:
	version = 1.0; encoding = "ISO-8859-1"

# Copyright (C) 2016-2017  Gerrit Leder, Finnian Reilly

# Gerrit Leder, Overather Str. 10, 51429 Bergisch-Gladbach, GERMANY
# gerrit.leder@gmail.com

# Finnian Reilly, Dunboyne, Co Meath, Ireland.
# finnian@eiffel-loop.com

system:
	configuration_ns = "1-16-0"; uuid = "b0730f54-4478-11e7-b58e-cfc186372549"
	name = el_protein
	description:
		"""
			Protein Folding using 2D HP model

			Various implementations of an optimal protein folding algorithm using the 2D HP model
			Includes both a single and multi-core implementation.

			This project was a joint collaboration between Gerrit Leder and Finnian Reilly.
			Gerrit developed the implemented the 2D HP algorithm in Eiffel and Finnian optimized
			it's performance and created a multi-core parallel computation version. 

			The multi-core version showcases the Eiffel-Loop class ${EL_PROCEDURE_DISTRIBUTER}.

			See: [https://sourceforge.net/p/pfhp/PF_HP-mt Sourceforge repository PF_HP-mt]
		"""
	target: 
		name = classic
		root:
			class = APPLICATION_ROOT; feature = make
		version:
			major = 2; minor = 0; release = 0; build = 133
			company = "Eiffel-Loop"; product = "PF_HP"
			copyright = "Finnian Reilly & Gerrit Leder"

		option: 
			syntax = standard; full_class_checking = false; void_safety = none
			trace = false; debug = false; warning = true
			assertions:
				precondition = true; postcondition = true; check = true; invariant = false

		settings:
			address_expression = false; array_optimization = false
			check_vape = true; console_application = true
			dead_code_removal = true; dynamic_runtime = false
			exception_trace = false
			line_generation = false; inlining = true; inlining_size = 3
			concurrency = thread

		precompile:
			precompile = "$ISE_PRECOMP/EL/console-application.ecf"

		# ISE libraries
		libraries:
			location = "$ISE_LIBRARY/library"
			base = "base/base.ecf"
			base_ext = "base_extension/base_extension.ecf"
			testing = "testing/testing.ecf"
			time = "time/time.ecf"

		library:
			gobo_base = "$EIFFEL_LOOP/library/gobo-base.ecf"

		# Eiffel-Loop
		
		writeable_libraries:
			location = "$EIFFEL_LOOP/library"
			EL_base = "base/base.ecf"
			EL_app_manage = "app-manage.ecf"
			EL_os_command = "os-command.ecf"
			EL_logging = "logging.ecf"
			EL_testing = "testing.ecf"
			EL_thread = "thread.ecf"
			EL_vtd_xml = "vtd-xml.ecf"
		
		# Sources
		cluster_tree:
			project = source

